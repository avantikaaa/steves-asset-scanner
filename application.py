# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Downloads/Frontent.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtWidgets import QMessageBox
import pymongo
import pandas as pd
import ssh_tunnel
import driver
import local
from PyQt5 import QtCore, QtGui, QtWidgets
from time import sleep

class Ui_MainWindow(object):
	
	def refresh_clicked(self):
		# show alert dialog
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Information)
		msgBox.setText("Are you sure you want to delete entries?")
		msgBox.setWindowTitle("Caution")
		msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
		# msgBox.buttonClicked.connect(msgButtonClick)
		self.setTextfunc("Erasing records....")

		returnValue = msgBox.exec_()
		if returnValue == QMessageBox.Cancel:
			return
		else:
			myclient = pymongo.MongoClient(
				"mongodb+srv://avantika:qlappzm12@todo.348ky.mongodb.net/flipkart?retryWrites=true&w=majority")
			mydb = myclient["flipkart"]

			mycol = mydb["Neelabh"]

			mycol.drop()
			self.setTextfunc(self.Status.toPlainText() + "Erasing records....")
			self.Table_widget.setColumnCount(0)
			self.Table_widget.setRowCount(0)
			sleep(1)
			self.setTextfunc("STATUS")
			success_popup = QMessageBox()
			success_popup.setWindowTitle("Success")
			success_popup.setText("All entries deleted")
			success_popup.exec_()

	def print_status(self, message):	
		self.Status.print(message)

	def display_table(self, data, fields):
		#fields: list of str
		# data: list of dictionaries with keys in fields
		# self.tableWidget = QTableWidget()
  
		#Row count
		self.Table_widget.setColumnCount(len(fields))
  
		#Column count
		if len(data) == 0:
			self.error_popup.setText("No search results")
			self.error_popup.exec_()
			return
		self.Table_widget.setRowCount(len(data) + 1) 
		
		# print(len(data), len(fields)) 
		
		for i in range(len(fields)):
			self.Table_widget.setItem(0,i, QtWidgets.QTableWidgetItem(fields[i]))
			
		# i = 0
		# for host in data:
		# 	for j in range(len(fields)):
		# 		self.Table_widget.setItem(i, j,QtWidgets.QTableWidgetItem( host[fields[j]]))
		# 	i += 1
		
		for i in range(len(data)):
			for j in range(len(fields)):
				self.Table_widget.setItem(i+1, j, QtWidgets.QTableWidgetItem(data[i][fields[j]]))
				self.Table_widget.setItem(i+1, 0, QtWidgets.QTableWidgetItem(str(i+1)))
		
	def show_table(self, query = {}):
		# client = pymongo.MongoClient(
		# 	"mongodb+srv://avantika:qlappzm12@todo.348ky.mongodb.net/flipkart?retryWrites=true&w=majority"
		# 	)
		# mydb = client['flipkart']
		# collection = mydb.Neelabh
		# if(len(query) == 0):
		# 	data = pd.DataFrame(list(collection.find()))
		# else:
		# 	data = pd.DataFrame(list(collection.find(query)))
		# fields = data.columns
		# print(type(data))
		# self.display_table(data, fields)
		
		myclient = pymongo.MongoClient("mongodb+srv://avantika:qlappzm12@todo.348ky.mongodb.net/flipkart?retryWrites=true&w=majority")
		mydb = myclient["flipkart"]

		mycol = mydb["Neelabh"]

		cursor = mycol.find(query)
		data = [document for document in cursor]
		# fields = ["_id", "IP", "MAC", "Name", "Domain info", "OS", "Workgroup", "Status"]
		if len(data) == 0:
			self.error_popup.setText("No results")
			self.error_popup.exec_()
			return
		fields = [i for i in data[0]]
		self.display_table(data, fields)

	def show_scan_results(self):
		self.show_table()
		pass
	
	def filter_results(self):
		filter_field = self.Filter.toPlainText()
		filter_field.strip("Field")
		# filter_field = 
		keyword = self.Keyword_search.toPlainText()
		keyword.strip("Enter Keyword")
		# print(filter_field + "----" + keyword)
		print(len(filter_field), len(keyword))
		if len(filter_field) == 0 or len(keyword) == 0:
			self.warning_popup.setText("Either Field or Keyword not entered")
			self.warning_popup.exec_()
			return
			
		elif filter_field == "Field" or keyword == "Enter Keyword":
			self.warning_popup.setText("Either Field or Keyword not entered")
			self.warning_popup.exec_()
			return
		# print("here")
		# return
		self.show_table({filter_field: keyword})
	
	# scan button check
	def check_ip_inp(self, ip): 
		try:
			ip = ip.split(".")
			if len(ip) != 4:
				return False
			for i in ip:
				if 0 <= int(i) <= 255:
					continue
				else:
					return False
			return True
		except:
			return False
	
	def scan_button_click(self): #, public_ip_popup):
		driver.main("10.0.0.1/25", "local", self.error_popup, self)
		self.show_scan_results()
		return
		if self.radioButton_public.isChecked():
			ip = self.Public_ip_text.toPlainText()
			if self.check_ip_inp(ip) == False:
				self.error_popup.setText("Please enter valid IP address !!!")
				self.error_popup.exec_()
			else:
				ssh_tunnel.main(ip, self.error_popup, self)
		else:
			self.error_popup.setText("Unknown error")
			#local.main(self.error_popup, self)
			ssh_tunnel.main("all", self.error_popup, self)  
		self.show_scan_results()  
			
	def stop_button_click(self):
		ssh_tunnel.close_connection(1)

	def setupUi(self, MainWindow):
		MainWindow.setObjectName("Steves' Asset Scanner")
		MainWindow.resize(977, 662)
		self.centralwidget = QtWidgets.QWidget(MainWindow)
		self.centralwidget.setObjectName("centralwidget")
		
		self.Table_widget = QtWidgets.QTableWidget(self.centralwidget)
		self.Table_widget.setGeometry(QtCore.QRect(10, 340, 961, 271))
		self.Table_widget.setObjectName("Table_widget")
		self.Table_widget.setColumnCount(0)
		self.Table_widget.setRowCount(0)
		
		# self.Table_widget.setHorizontalHeaderLabels(self.headers)
		# self.Table_widget.verticalHeader().setVisible(False)
		# self.Table_widget.resizeRowsToContents()
		# self.Table_widget.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
		# self.Table_widget.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)


		self.line = QtWidgets.QFrame(self.centralwidget)
		self.line.setGeometry(QtCore.QRect(40, 80, 541, 16))
		self.line.setFrameShape(QtWidgets.QFrame.HLine)
		self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
		self.line.setObjectName("line")
		self.line_2 = QtWidgets.QFrame(self.centralwidget)
		self.line_2.setGeometry(QtCore.QRect(40, 200, 891, 16))
		self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
		self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
		self.line_2.setObjectName("line_2")

		# self.Filter = QtWidgets.QPlainTextEdit(self.centralwidget)
		# self.Filter.setGeometry(QtCore.QRect(40, 250, 231, 31))
		# self.Filter.setObjectName("Filter")

		# self.Keyword_search = QtWidgets.QPlainTextEdit(self.centralwidget)
		# self.Keyword_search.setGeometry(QtCore.QRect(370, 250, 261, 31))
		# self.Keyword_search.setObjectName("Keyword_search")
		

		#done
		self.Filter = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.Filter.setGeometry(QtCore.QRect(40, 250, 231, 31))
		self.Filter.setObjectName("Filter")
		#done
		self.Keyword_search = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.Keyword_search.setGeometry(QtCore.QRect(370, 250, 261, 31))
		self.Keyword_search.setObjectName("Keyword_search")

		self.Filter.setPlainText("Field")
		self.Keyword_search.setPlainText("Keyword")
		
		#doing()
		self.Status = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.Status.setGeometry(QtCore.QRect(660, 10, 231, 161))
		self.Status.setObjectName("Status")

		#done
		self.radioButton_all = QtWidgets.QRadioButton(self.centralwidget)
		self.radioButton_all.setGeometry(QtCore.QRect(60, 30, 95, 20))
		self.radioButton_all.setObjectName("radioButton_all")
		self.radioButton_all.setChecked(True)
		#done
		self.radioButton_public = QtWidgets.QRadioButton(self.centralwidget)
		self.radioButton_public.setGeometry(QtCore.QRect(160, 30, 95, 20))
		self.radioButton_public.setObjectName("radioButton_public")
		#done
		self.Scan_button = QtWidgets.QPushButton(self.centralwidget)
		self.Scan_button.setGeometry(QtCore.QRect(50, 130, 101, 41))
		self.Scan_button.setObjectName("Scan_button")
		self.Scan_button.clicked.connect(self.scan_button_click)
		#doing()
		self.refresh_button = QtWidgets.QPushButton(self.centralwidget)
		self.refresh_button.setGeometry(QtCore.QRect(470, 130, 101, 41))
		self.refresh_button.setObjectName("refresh_button")
		self.refresh_button.clicked.connect(self.refresh_clicked)
		#done
		self.stop_button = QtWidgets.QPushButton(self.centralwidget)
		self.stop_button.setGeometry(QtCore.QRect(270, 130, 101, 41))
		self.stop_button.setObjectName("stop_button")
		self.stop_button.clicked.connect(self.stop_button_click)
		#done
		self.search_button = QtWidgets.QPushButton(self.centralwidget)
		self.search_button.setGeometry(QtCore.QRect(750, 240, 101, 41))
		self.search_button.setObjectName("search_button")
		self.search_button.clicked.connect(self.filter_results)
		#done
		self.Public_ip_text = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.Public_ip_text.setGeometry(QtCore.QRect(290, 30, 231, 31))
		self.Public_ip_text.setObjectName("Public_ip_text")
		
		# error popup
		self.error_popup = QMessageBox()
		self.error_popup.setWindowTitle("ERROR")
		
		# warning popup
		self.warning_popup = QMessageBox()
		self.warning_popup.setWindowTitle("Warning")

		MainWindow.setCentralWidget(self.centralwidget)
		self.menubar = QtWidgets.QMenuBar(MainWindow)
		self.menubar.setGeometry(QtCore.QRect(0, 0, 977, 26))
		self.menubar.setObjectName("menubar")
		MainWindow.setMenuBar(self.menubar)
		self.statusbar = QtWidgets.QStatusBar(MainWindow)
		self.statusbar.setObjectName("statusbar")
		MainWindow.setStatusBar(self.statusbar)

		self.retranslateUi(MainWindow)
		QtCore.QMetaObject.connectSlotsByName(MainWindow)

	def retranslateUi(self, MainWindow):
		_translate = QtCore.QCoreApplication.translate
		MainWindow.setWindowTitle(_translate("Steves' Asset Scanner", "Steves' Asset Scanner"))
		self.Filter.setPlainText(_translate("Steves' Asset Scanner", "Field"))
		self.Keyword_search.setPlainText(_translate("Steves' Asset Scanner", "Enter Keyword"))
		self.Status.setPlainText(_translate("Steves' Asset Scanner", "STATUS"))
		self.Scan_button.setText(_translate("Steves' Asset Scanner", "SCAN"))
		self.refresh_button.setText(_translate("Steves' Asset Scanner", "REFRESH"))
		self.stop_button.setText(_translate("Steves' Asset Scanner", "STOP"))
		self.search_button.setText(_translate("Steves' Asset Scanner", "SEARCH"))
		self.Public_ip_text.setPlainText(_translate("Steves' Asset Scanner", "Enter Public IP"))
		self.radioButton_all.setText(_translate("Steves' Asset Scanner", "ALL"))
		self.radioButton_public.setText(_translate("Steves' Asset Scanner", "PUBLIC IP"))
		
	def setTextfunc(self, text):
		_translate = QtCore.QCoreApplication.translate
		self.Status.setPlainText(_translate("Steves' Asset Scanner", text))
		


if __name__ == "__main__":
	import sys
	app = QtWidgets.QApplication(sys.argv)
	MainWindow = QtWidgets.QMainWindow()
	ui = Ui_MainWindow()
	ui.setupUi(MainWindow)
	MainWindow.show()
	sys.exit(app.exec_())
